__d(function(g,r,i,a,m,e,d){'use strict';function t(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function n(t,n){if(("function"==typeof Symbol?Symbol.iterator:"@@iterator")in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)){var o=[],u=!0,s=!1,l=void 0;try{for(var c,f=t["function"==typeof Symbol?Symbol.iterator:"@@iterator"]();!(u=(c=f.next()).done)&&(o.push(c.value),!n||o.length!==n);u=!0);}catch(t){s=!0,l=t}finally{try{u||null==f.return||f.return()}finally{if(s)throw l}}return o}}function o(t){if(Array.isArray(t))return t}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=r(d[0]).NativeModules,s=u.RNC_AsyncSQLiteDBStorage||u.RNCAsyncStorage||u.PlatformLocalStorage;if(!s)throw new Error("[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  \u2022 Run `react-native link @react-native-community/async-storage` in the project root.\n\n  \u2022 Rebuild and restart the app.\n\n  \u2022 Run the packager with `--clearCache` flag.\n\n  \u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app.\n\n  \u2022 If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://github.com/react-native-community/async-storage/blob/LEGACY/docs/Jest-integration.md\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-async-storage/issues \n");var l={_getRequests:[],_getKeys:[],_immediate:null,getItem:function(t,n){return new Promise(function(o,u){s.multiGet([t],function(t,s){var l=s&&s[0]&&s[0][1]?s[0][1]:null,f=c(t);n&&n(f&&f[0],l),f?u(f[0]):o(l)})})},setItem:function(t,n,o){return new Promise(function(u,l){s.multiSet([[t,n]],function(t){var n=c(t);o&&o(n&&n[0]),n?l(n[0]):u(null)})})},removeItem:function(t,n){return new Promise(function(o,u){s.multiRemove([t],function(t){var s=c(t);n&&n(s&&s[0]),s?u(s[0]):o(null)})})},mergeItem:function(t,n,o){return new Promise(function(u,l){s.multiMerge([[t,n]],function(t){var n=c(t);o&&o(n&&n[0]),n?l(n[0]):u(null)})})},clear:function(t){return new Promise(function(n,o){s.clear(function(u){var s=f(u);t&&t(s),s?o(s):n(null)})})},getAllKeys:function(t){return new Promise(function(n,o){s.getAllKeys(function(u,s){var l=f(u);t&&t(l,s),l?o(l):n(s)})})},flushGetRequests:function(){var u=this._getRequests,l=this._getKeys;this._getRequests=[],this._getKeys=[],s.multiGet(l,function(s,l){var c={};l&&l.forEach(function(u){var s,l,f=(l=2,o(s=u)||n(s,l)||t()),h=f[0],y=f[1];return c[h]=y,y});for(var f=u.length,h=0;h<f;h++){var y=u[h],v=y.keys.map(function(t){return[t,c[t]]});y.callback&&y.callback(null,v),y.resolve&&y.resolve(v)}})},multiGet:function(t,n){var o=this;this._immediate||(this._immediate=setImmediate(function(){o._immediate=null,o.flushGetRequests()}));var u={keys:t,callback:n,keyIndex:this._getKeys.length,resolve:null,reject:null},s=new Promise(function(t,n){u.resolve=t,u.reject=n});return this._getRequests.push(u),t.forEach(function(t){-1===o._getKeys.indexOf(t)&&o._getKeys.push(t)}),s},multiSet:function(t,n){return new Promise(function(o,u){s.multiSet(t,function(t){var s=c(t);n&&n(s),s?u(s):o(null)})})},multiRemove:function(t,n){return new Promise(function(o,u){s.multiRemove(t,function(t){var s=c(t);n&&n(s),s?u(s):o(null)})})},multiMerge:function(t,n){return new Promise(function(o,u){s.multiMerge(t,function(t){var s=c(t);n&&n(s),s?u(s):o(null)})})}};function c(t){return t?(Array.isArray(t)?t:[t]).map(function(t){return f(t)}):null}function f(t){if(!t)return null;var n=new Error(t.message);return n.key=t.key,n}s.multiMerge||(delete l.mergeItem,delete l.multiMerge);var h=l;e.default=h},614,[10]);