__d(function(g,r,i,a,m,e,d){var t,n,o,s,c,l,u,h,p=r(d[0]).NativeModules,f={};t=/^(\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i,h={},u=function(t,n){var o;return o=t,n||(n=0),o||((o=new Error("a plugin had an error but provided no response")).code=n),"string"==typeof o&&((o=new Error(t)).code=n),!o.code&&o.message&&(o.code=n),o.code||o.message||((o=new Error("an unknown error was returned: "+JSON.stringify(o))).code=n),o};var b=setImmediate||function(t){setTimeout(t,0)};g.window&&(b=window.setImmediate||function(t){window.setTimeout(t,0)}),c=function(t){return function(){var n,o,s;if(s=arguments.length){for(n=[],o=-1;++o<s;)n[o]=arguments[o];return t.call(this,n)}return t.call(this,[])}},f.exec=function(t,n,o,s){f.sqlitePlugin.DEBUG&&console.log('SQLite.'+t+'('+JSON.stringify(n)+')'),p.SQLite[t](n,o,s)},(o=function(t,n,o){var s;if(!t||!t.name)throw u("Cannot create a SQLitePlugin db instance without a db name");if('string'!=typeof(s=t.name))throw u('sqlite plugin database name must be a string');this.openargs=t,this.dbname=s,this.openSuccess=n,this.openError=o,this.openSuccess||(this.openSuccess=function(){console.log("DB opened: "+s)}),this.openError||(this.openError=function(t){console.log(t.message)}),this.open(this.openSuccess,this.openError)}).prototype.databaseFeatures={isSQLitePluginDatabase:!0},o.prototype.openDBs={},o.prototype.addTransaction=function(t){h[this.dbname]||(h[this.dbname]={queue:[],inProgress:!1}),h[this.dbname].queue.push(t),this.dbname in this.openDBs&&"INIT"!==this.openDBs[this.dbname]?this.startNextTransaction():this.dbname in this.openDBs?console.log('new transaction is waiting for open operation'):console.log('database is closed, new transaction is [stuck] waiting until db is opened again!')},o.prototype.transaction=function(t,n,o){this.openDBs[this.dbname]?this.addTransaction(new s(this,t,n,o,!0,!1)):n(u('database not open'))},o.prototype.readTransaction=function(t,n,o){this.openDBs[this.dbname]?this.addTransaction(new s(this,t,n,o,!1,!0)):n(u('database not open'))},o.prototype.startNextTransaction=function(){var t,n;t=this,b((n=this,function(){var o;n.dbname in n.openDBs&&"OPEN"===n.openDBs[n.dbname]?(o=h[t.dbname])?o.queue.length>0&&!o.inProgress&&(o.inProgress=!0,o.queue.shift().start()):console.log('cannot start next transaction: database connection is lost'):console.log('cannot start next transaction: database not open')}))},o.prototype.abortAllPendingTransactions=function(){var t,n,o,s;if((s=h[this.dbname])&&s.queue.length>0){for(t=0,n=(o=s.queue).length;t<n;t++)o[t].abortFromQ(u('Invalid database handle'));s.queue=[],s.inProgress=!1}},o.prototype.sqlBatch=function(t,n,o){var c,l,h,p,f;if(!t||t.constructor!==Array)throw u('sqlBatch expects an array');for(c=[],l=0,h=t.length;l<h;l++)if((f=t[l]).constructor===Array){if(0===f.length)throw u('sqlBatch array element of zero (0) length');c.push({sql:f[0],params:0===f.length?[]:f[1]})}else c.push({sql:f,params:[]});p=function(t){var n,o,s,l;for(l=[],o=0,s=c.length;o<s;o++)n=c[o],l.push(t.addStatement(n.sql,n.params,null,null));return l};this.addTransaction(new s(this,p,function(t){if(o)return o(t);console.log("Error handler not provided: ",t)},function(){if(n)return n()},!0,!1))},o.prototype.open=function(t,n){var o,s,c;this.dbname in this.openDBs&&"OPEN"===this.openDBs[this.dbname]?(console.log('database already open: '+this.dbname),b((c=this,function(){t(c)}))):(console.log('OPEN database: '+this.dbname),s=(function(n){return function(){var o;n.openDBs[n.dbname]||console.log('database was closed during open operation'),n.dbname in n.openDBs&&(n.openDBs[n.dbname]="OPEN"),t&&t(n),(o=h[n.dbname])&&o.queue.length>0&&!o.inProgress&&n.startNextTransaction()}})(this),o=(function(t){return function(){console.log('OPEN database: '+t.dbname+' failed, aborting any pending transactions'),n&&n(u('Could not open database')),delete t.openDBs[t.dbname],t.abortAllPendingTransactions()}})(this),this.openDBs[this.dbname]="INIT",f.exec("open",this.openargs,s,o))},o.prototype.close=function(t,n){if(this.dbname in this.openDBs){if(h[this.dbname]&&h[this.dbname].inProgress)return console.log('cannot close: transaction is in progress'),void n(u('database cannot be closed while a transaction is in progress'));console.log('CLOSE database: '+this.dbname),delete this.openDBs[this.dbname],h[this.dbname]?console.log('closing db with transaction queue length: '+h[this.dbname].queue.length):console.log('closing db with no transaction lock state');f.exec("close",{path:this.dbname},function(n,o){if(t)return t(o)},function(t,o){if(n)return n(o);console.log("Error handler not provided: ",o)})}else{var o='cannot close: database is not open';console.log(o),n&&b(function(){return n(o)})}},o.prototype.attach=function(t,n,o,s){if(this.dbname in this.openDBs){if(h[this.dbname]&&h[this.dbname].inProgress)return console.log('cannot attach: transaction is in progress'),void s(u('database cannot be attached while a transaction is in progress'));console.log('ATTACH database '+t+' to '+this.dbname+' with alias '+n);f.exec("attach",{path:this.dbname,dbName:t,dbAlias:n},function(t,n){if(o)return o(n)},function(t){if(s)return s(t);console.log("Error handler not provided: ",t)})}else{s&&b(function(){return s("cannot attach: database is not open")})}},o.prototype.detach=function(t,n,o){if(this.dbname in this.openDBs){if(h[this.dbname]&&h[this.dbname].inProgress)return console.log('cannot attach: transaction is in progress'),void o(u('database cannot be attached while a transaction is in progress'));console.log('DETACH database '+t+' from '+this.dbname);this.executeSql('DETACH DATABASE '+t,[],function(t,o){if(n)return n(o)},function(t){if(console.log('ERR',t),o)return o(t);console.log("Error handler not provided: ",t)})}else{var s='cannot attach: database is not open';console.log(s),o&&b(function(){return o(s)})}},o.prototype.executeSql=function(t,n,o,c){var l,u,h;h=function(t,n){if(o)return o(n)},l=function(t,n){if(c)return c(n);console.log("Error handler not provided: ",n)},u=function(o){o.addStatement(t,n,h,l)},this.addTransaction(new s(this,u,null,null,!1,!1))},(s=function(t,n,o,s,c,l){if("function"!=typeof n){var h=u("transaction expected a function");if(o)return o(h);throw h}this.db=t,this.fn=n,this.error=o,this.success=s,this.txlock=c,this.readOnly=l,this.executes=[],c?this.addStatement("BEGIN",[],null,function(t,n){throw u("unable to begin transaction: "+n.message,n.code)}):this.addStatement("SELECT 1",[],null,null)}).prototype.start=function(){var t;try{this.fn(this),this.run()}catch(n){t=n,h[this.db.dbname].inProgress=!1,this.db.startNextTransaction(),this.error&&this.error(u(t))}},s.prototype.executeSql=function(n,o,s,c){if(this.finalized)throw{message:"InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs on a subsequent tick and therefore after the transaction commits.",code:11};if(this.readOnly&&t.test(n))this.handleStatementFailure(c,{message:'invalid sql for a read-only transaction'});else{this.addStatement(n,o,function(t,n){if(s)return s(t,n)},function(t,n){if(c)return c(n);console.log("Error handler not provided: ",n)})}},s.prototype.addStatement=function(t,n,o,s){var c,l,h,p,f,b;if(p='string'==typeof t?t:t.toString(),h=[],n&&n.constructor===Array)for(c=0,l=n.length;c<l;c++)if(f=typeof(b=n[c]),null===b||void 0===b||'number'===f||'string'===f)h.push(b);else if('boolean'===f)h.push(~~b);else{if('function'===f){var y='Unsupported parameter type <'+f+'> found in addStatement()';return console.error(y),void s(u(y))}h.push(b.toString()),console.warn('addStatement - parameter of type <'+f+'> converted to string using toString()')}this.executes.push({success:o,error:s,sql:p,params:h})},s.prototype.handleStatementSuccess=function(t,n){var o;t&&t(this,{rows:{item:function(t){return o[t]},raw:function(){return o.slice()},length:(o=n.rows||[]).length},rowsAffected:n.rowsAffected||0,insertId:n.insertId||void 0})},s.prototype.handleStatementFailure=function(t,n){if(!t)throw u("a statement with no error handler failed: "+n.message,n.code);if(!1!==t(this,n))throw u("a statement error callback did not return false: "+n.message,n.code)},s.prototype.run=function(){var t,n,o,s,c,l,h,p,b;for(p=null,l=[],t=this.executes,b=t.length,this.executes=[],h=this,n=function(n,o){return function(s){if(!p){try{o?h.handleStatementSuccess(t[n].success,s):h.handleStatementFailure(t[n].error,u(s))}catch(t){var c=JSON.stringify(t);"{}"===c&&(c=t.toString()),console.log("warning - exception while invoking a callback: "+c)}o||(p=u(s))}0==--b&&(p?(h.executes=[],h.abort(p)):h.executes.length>0?h.run():h.finish())}},o=0,s=[];o<t.length;)c=t[o],s.push({success:n(o,!0),error:n(o,!1)}),l.push({qid:1111,sql:c.sql,params:c.params}),o++;f.exec("backgroundExecuteSqlBatch",{dbargs:{dbname:this.db.dbname},executes:l},function(t){var n,o,c,l,u,h;if(0!=t.length)for(o=t.length-1,n=0;n<=o;++n)h=(l=t[n]).type,u=l.result,(c=s[n])&&c[h]&&c[h](u)},function(t){console.log("batch execution error: ",t)})},s.prototype.abort=function(t){var n,o;this.finalized||(this,o=function(n){h[n.db.dbname].inProgress=!1,n.db.startNextTransaction(),n.error&&n.error(t)},n=function(t,n){h[t.db.dbname].inProgress=!1,t.db.startNextTransaction(),t.error&&t.error(u("error while trying to roll back: "+n.message,n.code))},this.finalized=!0,this.txlock?(this.addStatement("ROLLBACK",[],o,n),this.run()):o(this))},s.prototype.finish=function(){var t,n;this.finalized||(this,n=function(t){h[t.db.dbname].inProgress=!1,t.db.startNextTransaction(),t.success&&t.success()},t=function(t,n){h[t.db.dbname].inProgress=!1,t.db.startNextTransaction(),t.error&&t.error(u("error while trying to commit: "+n.message,n.code))},this.finalized=!0,this.txlock?(this.addStatement("COMMIT",[],n,t),this.run()):n(this))},s.prototype.abortFromQ=function(t){this.error&&this.error(t)},l={default:'nosync',Documents:'docs',Library:'libs'},(n=function(){}).prototype.DEBUG=function(t){console.log("Setting debug to:",t),f.sqlitePlugin.DEBUG=t},n.prototype.sqliteFeatures=function(){return{isSQLitePlugin:!0}},n.prototype.openDatabase=c(function(t){var n,s,c,u;return t.length<1?null:(u=null,c=n=function(){},(s=t[0]).constructor===String?(u={name:s,dblocation:l.default},t.length>=5&&(c=t[4],t.length>5&&(n=t[5]))):(!!(u=s).readOnly||u.location&&u.location.constructor===String&&l.hasOwnProperty(u.location)?u.dblocation=l[u.location]:u.dblocation=l.default,u.createFromLocation&&(1===u.createFromLocation?u.assetFilename="1":'string'==typeof u.createFromLocation&&(u.assetFilename=u.createFromLocation)),u.androidDatabaseImplementation&&2===u.androidDatabaseImplementation&&(u.androidOldDatabaseImplementation=1),u.androidLockWorkaround&&1===u.androidLockWorkaround&&(u.androidBugWorkaround=1),t.length>=2&&(c=t[1],t.length>2&&(n=t[2]))),new o(u,c,n))}),n.prototype.echoTest=function(t,n){f.exec("echoStringValue",{value:"test-string"},function(o){return"test-string"===o?t():n("Mismatch: got: "+o+" , expected: test-string")},function(t){return n(t)})},n.prototype.deleteDatabase=function(t,n,s){var c={};if(t.constructor===String)c.path=t,c.dblocation=l.default;else{if(!t||!t.name)throw new Error("Please specify db name via name property");c.path=t.name,t.location&&t.location.constructor===String&&l.hasOwnProperty(t.location)?c.dblocation=l[t.location]:c.dblocation=l.default}f.exec("delete",c,function(t){if(delete o.prototype.openDBs[c.path],n)return n(t)},function(t){if(s)return s(t);console.log("deleteDatabase error handler not provided: ",t)})},f.sqlitePlugin={SQLiteFactory:n,SQLitePluginTransaction:s,SQLitePlugin:o},m.exports=f.sqlitePlugin},624,[10]);