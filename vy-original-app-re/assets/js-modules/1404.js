__d(function(g,r,i,a,m,e,d){function o(o,t,n,s){if(void 0===o)throw new Error('geometry is required');if(t&&t.constructor!==Object)throw new Error('properties must be an Object');var u={type:'Feature',properties:t||{},geometry:o};if(n){if(4!==n.length)throw new Error('bbox must be an Array of 4 numbers');u.bbox=n}return s&&(u.id=s),u}function t(t,n,s,u){if(!t)throw new Error('No coordinates passed');if(void 0===t.length)throw new Error('Coordinates must be an array');if(t.length<2)throw new Error('Coordinates must be at least 2 numbers long');if('number'!=typeof t[0]||'number'!=typeof t[1])throw new Error('Coordinates must contain numbers');return o({type:'Point',coordinates:t},n,s,u)}function n(t,n,s,u){if(!t)throw new Error('No coordinates passed');for(var w=0;w<t.length;w++){var l=t[w];if(l.length<4)throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');for(var f=0;f<l[l.length-1].length;f++)if(l[l.length-1][f]!==l[0][f])throw new Error('First and last Position are not equivalent.')}return o({type:'Polygon',coordinates:t},n,s,u)}function s(t,n,s,u){if(!t)throw new Error('No coordinates passed');if(t.length<2)throw new Error('Coordinates must be an array of two or more positions');return o({type:'LineString',coordinates:t},n,s,u)}function u(t,n,s,u){if(!t)throw new Error('No coordinates passed');return o({type:'MultiLineString',coordinates:t},n,s,u)}function w(t,n,s,u){if(!t)throw new Error('No coordinates passed');return o({type:'MultiPoint',coordinates:t},n,s,u)}function l(t,n,s,u){if(!t)throw new Error('No coordinates passed');return o({type:'MultiPolygon',coordinates:t},n,s,u)}var f={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},c={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function h(o,t){if(void 0===o||null===o)throw new Error('radians is required');var n=f[t||'kilometers'];if(!n)throw new Error('units is invalid');return o*n}function y(o,t){if(void 0===o||null===o)throw new Error('distance is required');var n=f[t||'kilometers'];if(!n)throw new Error('units is invalid');return o/n}function b(o){if(null===o||void 0===o)throw new Error('radians is required');return 180*(o%(2*Math.PI))/Math.PI}m.exports={feature:o,geometry:function(o,f,c){if(!o)throw new Error('type is required');if(!f)throw new Error('coordinates is required');if(!Array.isArray(f))throw new Error('coordinates must be an Array');var h;switch(o){case'Point':h=t(f).geometry;break;case'LineString':h=s(f).geometry;break;case'Polygon':h=n(f).geometry;break;case'MultiPoint':h=w(f).geometry;break;case'MultiLineString':h=u(f).geometry;break;case'MultiPolygon':h=l(f).geometry;break;default:throw new Error(o+' is invalid')}if(c){if(4!==c.length)throw new Error('bbox must be an Array of 4 numbers');h.bbox=c}return h},featureCollection:function(o,t){if(!o)throw new Error('No features passed');if(!Array.isArray(o))throw new Error('features must be an Array');var n={type:'FeatureCollection',features:o};return t&&(n.bbox=t),n},geometryCollection:function(t,n,s,u){if(!t)throw new Error('geometries is required');if(!Array.isArray(t))throw new Error('geometries must be an Array');return o({type:'GeometryCollection',geometries:t},n,s,u)},point:t,multiPoint:w,lineString:s,multiLineString:u,polygon:n,multiPolygon:l,radiansToDistance:h,distanceToRadians:y,distanceToDegrees:function(o,t){return b(y(o,t))},radians2degrees:b,degrees2radians:function(o){if(null===o||void 0===o)throw new Error('degrees is required');return o%360*Math.PI/180},bearingToAngle:function(o){if(null===o||void 0===o)throw new Error('bearing is required');var t=o%360;return t<0&&(t+=360),t},convertDistance:function(o,t,n){if(null===o||void 0===o)throw new Error('distance is required');if(!(o>=0))throw new Error('distance must be a positive number');return h(y(o,t),n||'kilometers')},convertArea:function(o,t,n){if(null===o||void 0===o)throw new Error('area is required');if(!(o>=0))throw new Error('area must be a positive number');var s=c[t||'meters'];if(!s)throw new Error('invalid original units');var u=c[n||'kilometers'];if(!u)throw new Error('invalid final units');return o/s*u},round:function(o,t){if(void 0===o||null===o||isNaN(o))throw new Error('num is required');if(t&&!(t>=0))throw new Error('precision must be a positive number');var n=Math.pow(10,t||0);return Math.round(o*n)/n}}},1404,[]);